services:
  ollama:
    image: ollama/ollama:latest
    container_name: jm-ollama
    restart: unless-stopped
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    environment:
      OLLAMA_ORIGINS: ${OLLAMA_ORIGINS:-*}
    volumes:
      - ollama-data:/root/.ollama
    healthcheck:
      test: ["CMD-SHELL", "ollama list >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - jm-network

  db:
    image: mariadb:11
    container_name: jm-db
    restart: unless-stopped
    environment:
      MARIADB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-jm-root}
      MARIADB_DATABASE: ${DB_NAME:-jm}
      MARIADB_USER: ${DB_USER:-jm}
      MARIADB_PASSWORD: ${DB_PASSWORD:-jm}
      TZ: ${TZ:-UTC}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - db-data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "pgrep mysqld >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - jm-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: jm-backend
    depends_on:
      ollama:
        condition: service_healthy
      db:
        condition: service_healthy
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-local}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL:-jdbc:mariadb://db:3306/${DB_NAME:-jm}?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true}
      SPRING_DATASOURCE_USERNAME: ${DB_USER:-jm}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-jm}
      OLLAMA_API_URL: ${OLLAMA_API_URL:-http://ollama:11434}
      JAVA_OPTS: ${JAVA_OPTS:-"-XX:MaxRAMPercentage=75"}
      CLOUDFLARE_ACCOUNT_ID: ${CLOUDFLARE_ACCOUNT_ID:-}
      CLOUDFLARE_ACCESS_KEY_ID: ${CLOUDFLARE_ACCESS_KEY_ID:-}
      CLOUDFLARE_SECRET_ACCESS_KEY: ${CLOUDFLARE_SECRET_ACCESS_KEY:-}
      CLOUDFLARE_BUCKET_NAME: ${CLOUDFLARE_BUCKET_NAME:-}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY:-}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-}
      ASAAS_API_KEY: ${ASAAS_API_KEY:-}
      ASAAS_PIX_KEY: ${ASAAS_PIX_KEY:-}
      ASAAS_WEBHOOK_TOKEN: ${ASAAS_WEBHOOK_TOKEN:-}
      EMAIL_FROM: ${EMAIL_FROM:-no-reply@jm.com}
      EMAIL_CONFIRMATION_BASE_URL: ${EMAIL_CONFIRMATION_BASE_URL:-https://app.jm.com/confirm-account}
      EMAIL_DEFAULT_LANGUAGE: ${EMAIL_DEFAULT_LANGUAGE:-en-US}
      WHATSAPP_PHONE_NUMBER: ${WHATSAPP_PHONE_NUMBER:-}
      WHATSAPP_API_TOKEN: ${WHATSAPP_API_TOKEN:-}
      SPRING_MAIL_HOST: ${SPRING_MAIL_HOST:-}
      SPRING_MAIL_PORT: ${SPRING_MAIL_PORT:-0}
      SPRING_MAIL_USERNAME: ${SPRING_MAIL_USERNAME:-}
      SPRING_MAIL_PASSWORD: ${SPRING_MAIL_PASSWORD:-}
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      OAUTH2_CLIENT_SECRET: ${OAUTH2_CLIENT_SECRET:-}
      WHATSAPP_HUGGINGFACE_TOKEN: ${WHATSAPP_HUGGINGFACE_TOKEN:-}
      JWT_SECRET: ${JWT_SECRET:-}
      TZ: ${TZ:-UTC}
    working_dir: /workspace
    command: ["sh", "-c", "sed -i 's/\\r$//' mvnw && chmod +x mvnw && ./mvnw spring-boot:run"]
    volumes:
      - .:/workspace
      - maven-cache:/root/.m2
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - jm-network

  frontend:
    build:
      context: ./app
      dockerfile: Dockerfile
      target: development
    container_name: jm-frontend
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:8080}
      CHOKIDAR_USEPOLLING: "true"
    command: ["sh", "-c", "[ -d node_modules ] || npm ci; npm run dev -- --host 0.0.0.0 --port 5173"]
    volumes:
      - ./app:/app
      - node-modules:/app/node_modules
    networks:
      - jm-network

volumes:
  db-data:
  ollama-data:
  maven-cache:
  node-modules:

networks:
  jm-network:
    driver: bridge
